version: 2.1

parameters:
  windows_image:
    type: string
    default: "circleci/windows@2.2.0"
  project_dir:
    type: string
    default: "JMeterCircleCI"
  test_dir:
    type: string
    default: "JMeterCircleCI.Tests"
  function_zip_file:
    type: string
    default: "func-jmetercircleci.zip"
  jmeter_server_vm:
    type: string
    default: "jmeterserver"
  jmeter_client_vm:
    type: string
    default: "jmeterclient"
  key_vault_name:
    type: string
    default: "kv-circleci"

orbs:
  windows: << pipeline.parameters.windows_image >>
  terraform: circleci/terraform@3.0.0
  azure-cli: circleci/azure-cli@1.2.0

jobs:
  build_image:
    description: Build and Push JMeter Docker image
    executor:
      name: azure-cli/default
    steps:
      - checkout

      - run:
          name: "Login to Azure"
          command: |
            # Login using service principal
            az login `
            --service-principal `
            --tenant "$Env:ARM_TENANT_ID" `
            --username "$Env:ARM_CLIENT_ID" `
            --password "$Env:ARM_CLIENT_SECRET"

            # Set default subscription
            az account set `
            --subscription "$Env:ARM_SUBSCRIPTION_ID"

      - run:
          name: "Build and Push JMeter Docker image"
          command: |
            az acr build `
            -t $Env:TF_VAR_JMETER_DOCKER_IMAGE `
            -r $Env:TF_VAR_JMETER_IMAGE_REGISTRY_NAME `
            -f docker/Dockerfile `
            .

  build_web_app:
    description: Build application with Release configuration
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Build Application according to some given configuration"
          command: >
            dotnet
            build << pipeline.parameters.project_dir >>
            --configuration Release

  test_web_app:
    description: Setup and run application tests
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Run Application Tests"
          command: >
            dotnet
            test << pipeline.parameters.test_dir >>
            --configuration Release
            --logger trx

      - run:
          name: "Install trx2junit"
          when: always
          command: |
            dotnet tool install -g trx2junit
            trx2junit << pipeline.parameters.test_dir >>/TestResults/*.trx

      - store_test_results:
          name: "Store test results"
          path: << pipeline.parameters.test_dir >>/TestResults

  package_web_app:
    description: Package application
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Create package folder"
          command: >
            dotnet
            publish << pipeline.parameters.project_dir >>
            --configuration Release
            --output package

      - run:
          name: "Zip package folder"
          command: >
            Compress-Archive
            -Path package
            -DestinationPath << pipeline.parameters.function_zip_file >>

      - persist_to_workspace:
          name: "Upload zip file to shared workspace"
          root: .
          paths:
            - << pipeline.parameters.function_zip_file >>

  deploy_az_cli:
    description: Deploy application
    executor:
      name: windows/default
    steps:
      - attach_workspace:
          at: .

      - run:
          name: "Login to Azure"
          command: |
            # Login using service principal
            az login `
            --service-principal `
            --tenant "$Env:ARM_TENANT_ID" `
            --username "$Env:ARM_CLIENT_ID" `
            --password "$Env:ARM_CLIENT_SECRET"

            # Set default subscription
            az account set `
            --subscription "$Env:ARM_SUBSCRIPTION_ID"

      - run:
          name: "Create azure function"
          command: |
            # Set common variables which is associated with build id
            $rg = "rg-jmetercircleci$Env:CIRCLE_BUILD_NUM"
            $st = "stjmetercircleci$Env:CIRCLE_BUILD_NUM"
            $func = "func-jmetercircleci$Env:CIRCLE_BUILD_NUM"

            # Create resource group
            az group create `
            --location eastus `
            --name "$rg"

            # Create storage account
            az storage account create `
            --resource-group "$rg" `
            --name "$st"

            # Create azure function app
            az functionapp create `
            --resource-group "$rg" `
            --storage-account "$st" `
            --name "$func" `
            --consumption-plan-location eastus `
            --os-type Windows `
            --runtime dotnet

            # Deploy zip file
            az functionapp deployment source config-zip `
            --resource-group "$rg" `
            --name "$func" `
            --src << pipeline.parameters.function_zip_file >>

            # Output variables to file
            echo "`$buildNum=`"$Env:CIRCLE_BUILD_NUM`"" >> output.ps1
            echo "`$targetHost=`"$func.azurewebsites.net`"" >> output.ps1

      - persist_to_workspace:
          name: "Upload output file to shared workspace"
          root: .
          paths:
            - output.ps1

  loadtest_az_cli:
    description: Load testing using JMeter
    executor:
      name: windows/default
    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: "Login to Azure"
          command: |
            # Login using service principal
            az login `
            --service-principal `
            --tenant "$Env:ARM_TENANT_ID" `
            --username "$Env:ARM_CLIENT_ID" `
            --password "$Env:ARM_CLIENT_SECRET"

            # Set default subscription
            az account set `
            --subscription "$Env:ARM_SUBSCRIPTION_ID"

      - run:
          name: "Create virtual machines for load tests"
          no_output_timeout: 45m
          command: |
            # Load output variables from file
            . .\output.ps1

            # Retrieve secrets from Azure Key Vault
            $username = & az keyvault secret show `
            --vault-name << pipeline.parameters.key_vault_name >> `
            --query value `
            --name admin-user

            $password = & az keyvault secret show `
            --vault-name << pipeline.parameters.key_vault_name >> `
            --query value `
            --name admin-password

            # Create resource group
            $rg = "rg-loadtest$buildNum"
            az group create `
            --location eastus `
            --name "$rg"

            # Create vnet
            az network vnet create `
            --resource-group "$rg" `
            --name vnet-jmeter `
            --subnet-name default

            # Create server vm
            az vm create `
            --resource-group "$rg" `
            --name "<< pipeline.parameters.jmeter_server_vm >>" `
            --image "win2016datacenter" `
            --size Standard_A1_v2 `
            --use-unmanaged-disk `
            --storage-sku Standard_LRS `
            --admin-username "$username" `
            --admin-password "$password" `
            --public-ip-address pip-server

            # Execute remote script to setup server
            az vm extension set `
            --publisher Microsoft.Compute `
            --version 1.9 `
            --name CustomScriptExtension `
            --resource-group "$rg" `
            --vm-name "<< pipeline.parameters.jmeter_server_vm >>" `
            --no-wait `
            --settings '{\"fileUris\": [\"https://raw.githubusercontent.com/phongcao/jmeter-circleci/main/scripts/jmeter_server_init.ps1\"],\"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted -File jmeter_server_init.ps1\"}'

            # Create client vm
            az vm create `
            --resource-group "$rg" `
            --name "<< pipeline.parameters.jmeter_client_vm >>" `
            --image "win2016datacenter" `
            --size Standard_A1_v2 `
            --use-unmanaged-disk `
            --storage-sku Standard_LRS `
            --admin-username "$username" `
            --admin-password "$password" `
            --public-ip-address pip-client

            # Query ip address of jmeter server
            $ip = az vm show `
            --resource-group "$rg" `
            --name "<< pipeline.parameters.jmeter_server_vm >>" `
            --query privateIps `
            --show-details `
            --output tsv

            # Output info
            echo "jmeter server: $ip"
            echo "target host: $targetHost"

            # Waiting to make sure that jmeter server has been started
            Start-Sleep -Second 300

            # Execute remote script to setup client
            az vm run-command invoke `
            --command-id RunPowerShellScript `
            --name "<< pipeline.parameters.jmeter_client_vm >>" `
            --resource-group "$rg" `
            --scripts @scripts/jmeter_client_init.ps1 `
            --parameters "arg1=$ip" "arg2=$targetHost"

      - run:
          name: "Cleanup resources"
          when: always
          no_output_timeout: 30m
          command: |
            # Load output variables from file
            . .\output.ps1

            # Remove resource groups
            az group delete `
            --name "rg-jmetercircleci$buildNum" `
            --yes

            az group delete `
            --name "rg-loadtest$buildNum" `
            --yes

  deploy_terraform:
    executor: terraform/default
    working_directory: terraform
    steps:
      - checkout

      - attach_workspace:
          at: .

      - terraform/init:
          path: terraform

      - terraform/validate:
          path: terraform

      - terraform/plan:
          path: terraform

      - terraform/apply:
          path: terraform

      - terraform/destroy:
          path: terraform

workflows:
  build_jmeter_docker_image:
    jobs:
      - build_image_approval:
          type: approval
      - build_image:
          requires:
            - build_image_approval
          # filters:
          #   branches:
          #     only:
          #       - main

  build_deploy_loadtest:
    jobs:
      - build_web_app
      - test_web_app:
          requires:
            - build_web_app
      - package_web_app:
          requires:
            - test_web_app
          # filters:
          #   branches:
          #     only:
          #       - main
      # - deploy_approval:
      #     type: approval
      #     requires:
      #       - package_web_app
      - deploy_terraform:
          requires:
            - package_web_app # deploy_approval
      # - deploy_az_cli:
      #     requires:
      #       - deploy_approval
      # - loadtest_az_cli:
      #     requires:
      #       - deploy_az_cli
