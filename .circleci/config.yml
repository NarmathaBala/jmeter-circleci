version: 2.1

parameters:
  project_dir:
    type: string
    default: "JMeterCircleCI"
  test_dir:
    type: string
    default: "JMeterCircleCI.Tests"
  function_zip_file:
    type: string
    default: "func-jmetercircleci.zip"
  jmeter_server_vm:
    type: string
    default: "jmeterserver"
  jmeter_client_vm:
    type: string
    default: "jmeterclient"
  key_vault_name:
    type: string
    default: "kv-circleci"
  jmeter_directory_input:
    type: string
    default: "jmeter"
  junit_file_name:
    type: string
    default: "output.xml"

orbs:
  windows: circleci/windows@2.2.0
  terraform: circleci/terraform@3.0.0
  azure-cli: circleci/azure-cli@1.2.0

commands:
  login-to-azure:
    steps:
      - azure-cli/install

      - run:
          name: "Verify Azure install"
          command: az -v

      - azure-cli/login-with-service-principal:
          azure-sp: ARM_CLIENT_ID
          azure-sp-password: ARM_CLIENT_SECRET
          azure-sp-tenant: ARM_TENANT_ID

  install-terraform-linux:
    steps:
      - run:
          name: "Install terraform"
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform

  install-azcopy-linux:
    steps:
      - run:
          name: "Install AzCopy"
          command: |
            # Install azcopy dependencies
            sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
            sudo apt-get update
            sudo apt-get install -y libicu55 libcurl3

            # Install azcopy package from https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/
            # See: https://docs.microsoft.com/en-us/previous-versions/azure/storage/storage-use-azcopy-linux
            echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/ xenial main" > azure.list
            sudo cp ./azure.list /etc/apt/sources.list.d/
            sudo apt-get update --allow-unauthenticated --allow-insecure-repositories
            sudo apt-get install -y --allow-unauthenticated azcopy

jobs:
  build_image:
    description: Build and Push JMeter Docker image
    executor:
      name: azure-cli/default
    steps:
      - checkout

      - login-to-azure

      - run:
          name: "Build and Push JMeter Docker image"
          command: >
            az acr build
            -t $TF_VAR_JMETER_DOCKER_IMAGE
            -r $TF_VAR_JMETER_IMAGE_REGISTRY_NAME
            -f docker/Dockerfile
            .

  build_web_app:
    description: Build application with Release configuration
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Build Application according to some given configuration"
          command: >
            dotnet
            build << pipeline.parameters.project_dir >>
            --configuration Release

  test_web_app:
    description: Setup and run application tests
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Run Application Tests"
          command: >
            dotnet
            test << pipeline.parameters.test_dir >>
            --configuration Release
            --logger trx

      - run:
          name: "Install trx2junit"
          when: always
          command: |
            dotnet tool install -g trx2junit
            trx2junit << pipeline.parameters.test_dir >>/TestResults/*.trx

      - store_test_results:
          name: "Store test results"
          path: << pipeline.parameters.test_dir >>/TestResults

  package_web_app:
    description: Package application
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Create package folder"
          command: >
            dotnet
            publish << pipeline.parameters.project_dir >>
            --configuration Release
            --output package

      - run:
          name: "Zip package folder"
          command: >
            Compress-Archive
            -Path package
            -DestinationPath << pipeline.parameters.function_zip_file >>

      - persist_to_workspace:
          name: "Upload zip file to shared workspace"
          root: .
          paths:
            - << pipeline.parameters.function_zip_file >>

  deploy_web_app:
    description: Deploy application
    executor:
      name: azure-cli/default
    steps:
      - attach_workspace:
          at: .

      - login-to-azure

      - run:
          name: "Create azure function"
          command: |
            # Set common variables which is associated with build id
            rg="rg-jmetercircleci$CIRCLE_BUILD_NUM"
            st="stjmetercircleci$CIRCLE_BUILD_NUM"
            func="func-jmetercircleci$CIRCLE_BUILD_NUM"

            # Create resource group
            az group create \
            --location eastus \
            --name "$rg"

            # Create storage account
            az storage account create \
            --resource-group "$rg" \
            --name "$st"

            # Create azure function app
            az functionapp create \
            --resource-group "$rg" \
            --storage-account "$st" \
            --name "$func" \
            --consumption-plan-location eastus \
            --os-type Windows \
            --runtime dotnet

            # Deploy zip file
            az functionapp deployment source config-zip \
            --resource-group "$rg" \
            --name "$func" \
            --src << pipeline.parameters.function_zip_file >> \
            || true

            # Output variables to file
            echo "TF_VAR_TARGET_HOSTNAME=$func.azurewebsites.net" >> .env

      - persist_to_workspace:
          name: "Upload output file to shared workspace"
          root: .
          paths:
            - .env

  load_test:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout

      - attach_workspace:
          at: .

      - login-to-azure

      - install-terraform-linux

      - install-azcopy-linux

      - terraform/init:
          path: terraform

      - terraform/validate:
          path: terraform

      - terraform/plan:
          path: terraform

      - run:
          name: "Run Terraform Apply (target=file share)"
          working_directory: terraform
          command: >
            terraform apply
            -target azurerm_storage_share.jmeter_share
            -auto-approve

      - run:
          name: "Transfer JMeter Files to Storage Account"
          working_directory: terraform
          command: |
            URL=$(terraform output --raw storage_file_share_url)
            KEY=$(terraform output --raw storage_account_key)

            az storage file upload-batch \
            --destination $URL \
            --source "../<< pipeline.parameters.jmeter_directory_input >>" \
            --account-key $KEY

      - run:
          name: "Run Terraform Apply"
          working_directory: terraform
          command: |
            # Load output variables from file
            set -a
            source ../.env
            set +a

            # Run terraform apply command
            terraform apply -auto-approve

      - run:
          name: "Waiting for test results."
          working_directory: terraform
          command: |
            RG=$(terraform output --raw resource_group_name)
            NAME=$(terraform output --raw jmeter_master_name)
            echo "`date`: Started!"
            while [ $(az container show -g $RG -n $NAME --query "containers[0].instanceView.currentState.state" -o tsv) == "Running" ]; do
              echo "`date`: Still Running..."
              sleep 20
            done
            echo "`date`: Finished!"

      - run:
          name: "Get output logs."
          working_directory: terraform
          command: |
            RG=$(terraform output --raw resource_group_name)
            NAME=$(terraform output --raw jmeter_master_name)
            az container logs -g $RG -n $NAME

      - run:
          name: "Download JMeter Results."
          command: |
            KEY=$(terraform output --raw storage_account_key)
            FILESHARE_NAME=$(terraform output --raw storage_file_share_name)
            JMETER_RESULTS_PATH=<< pipeline.parameters.jmeter_directory_input >>/$(terraform output --raw jmeter_results_file)
            az storage file download -p $JMETER_RESULTS_PATH -s $FILESHARE_NAME --account-key $KEY

      - run:
          name: "Convert JMeter results to JUnit."
          command: |
            JMETER_RESULTS=$(terraform output --raw jmeter_results_file)
            JUNIT_RESULTS=<< pipeline.parameters.junit_file_name >>
            python3 scripts/jtl_junit_converter.py $JMETER_RESULTS $JUNIT_RESULTS

      - run:
          name: "Upload JUnit Results to fileshare."
          command: |
            KEY=$(terraform output --raw storage_account_key)
            FILESHARE_NAME=$(terraform output --raw storage_file_share_name)
            JUNIT_RESULTS=<< pipeline.parameters.junit_file_name >>
            az storage file upload -s $FILESHARE_NAME --source $JUNIT_RESULTS --account-key $KEY

      # - terraform/destroy:
      #     path: terraform

workflows:
  build_jmeter_docker_image:
    jobs:
      - build_image_approval:
          type: approval
      - build_image:
          requires:
            - build_image_approval
          # filters:
          #   branches:
          #     only:
          #       - main

  build_deploy_loadtest:
    jobs:
      - build_web_app
      - test_web_app:
          requires:
            - build_web_app
      - package_web_app:
          requires:
            - test_web_app
          # filters:
          #   branches:
          #     only:
          #       - main
      - deploy_approval:
          type: approval
          requires:
            - package_web_app
      - deploy_web_app:
          requires:
            - deploy_approval
      - load_test:
          requires:
            - deploy_web_app
