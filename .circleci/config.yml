version: 2.1

parameters:
  project_dir:
    type: string
    default: "JMeterCircleCI"
  test_dir:
    type: string
    default: "JMeterCircleCI.Tests"
  function_zip_file:
    type: string
    default: "func-jmetercircleci.zip"
  jmeter_server_vm:
    type: string
    default: "jmeterserver"
  jmeter_client_vm:
    type: string
    default: "jmeterclient"
  key_vault_name:
    type: string
    default: "kv-circleci"
  jmeter_directory_input:
    type: string
    default: "jmeter"
  junit_file_name:
    type: string
    default: "output.xml"
  properties_file_name:
    type: string
    default: "sample.properties"
  environment_name:
    type: string
    default: "ne"

orbs:
  windows: circleci/windows@2.2.0
  terraform: circleci/terraform@3.0.0
  azure-cli: circleci/azure-cli@1.2.0

commands:
  login-to-azure:
    steps:
      - azure-cli/install

      - run:
          name: "Verify Azure install"
          command: az -v

      - azure-cli/login-with-service-principal:
          azure-sp: SERVICE_PRINCIPAL_ID
          azure-sp-password: SERVICE_PRINCIPAL_SECRET
          azure-sp-tenant: TENANT_ID
  
  login-to-azure-down:
    steps:
      - azure-cli/install
      - run: sudo apt-cache policy azure-cli | sudo apt-get install --allow-downgrades azure-cli=2.18.0-1~stretch

      - run:
          name: "Verify Azure install"
          command: az -v

      - azure-cli/login-with-service-principal:
          azure-sp: SERVICE_PRINCIPAL_ID
          azure-sp-password: SERVICE_PRINCIPAL_SECRET
          azure-sp-tenant: TENANT_ID
  

  install-terraform-linux:
    steps:
      - run:
          name: "Install terraform"
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform

  install-azcopy-linux:
    steps:
      - run:
          name: "Install AzCopy"
          command: |
            # Install azcopy dependencies
            sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
            sudo apt-get update
            sudo apt-get install -y libicu55 libcurl3

            # Install azcopy package from https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/
            # See: https://docs.microsoft.com/en-us/previous-versions/azure/storage/storage-use-azcopy-linux
            echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/ xenial main" > azure.list
            sudo cp ./azure.list /etc/apt/sources.list.d/
            sudo apt-get update --allow-unauthenticated --allow-insecure-repositories
            sudo apt-get install -y --allow-unauthenticated azcopy

jobs:
  build_image:
    description: Build and Push JMeter Docker image
    executor:
      name: azure-cli/default
    steps:
      - checkout

      - login-to-azure

      - run:
          name: "Build and Push JMeter Docker image"
          command: >
            az acr build
            -t $TF_VAR_JMETER_DOCKER_IMAGE
            -r $TF_VAR_JMETER_IMAGE_REGISTRY_NAME
            -f docker/Dockerfile
            .
  
  deploy_script:
    executor:
      name: azure-cli/default
    steps:
      - checkout 

      - attach_workspace:
          at: .

      - login-to-azure-down

      - run:
          name: "Invoking the deploy script for infrastructure and dsc configuration"
          command: |
            cd scripts
            chmod a+x env_setup.sh
            ./env_setup.sh << pipeline.parameters.environment_name >>

      - run:
          name: "Writing to properties file"
          command: |
            # Output variables to file
            echo "TF_VAR_TARGET_HOSTNAME=$func.azurewebsites.net" >> .env
            echo "target_hostname=$func.azurewebsites.net" >> << pipeline.parameters.properties_file_name >>
            echo "number_of_threads=10" >> << pipeline.parameters.properties_file_name >>

      - persist_to_workspace:
          name: "Upload output file to shared workspace"
          root: .
          paths:
            - .env
            - << pipeline.parameters.properties_file_name >>

  load_test:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout

      - attach_workspace:
          at: .

      - login-to-azure

      - install-terraform-linux

      - terraform/init:
          path: terraform

      - terraform/validate:
          path: terraform

      - terraform/plan:
          path: terraform

      - run:
          name: "Run Terraform Apply (target=file share)"
          working_directory: terraform
          command: >
            terraform apply
            -target azurerm_storage_share.jmeter_share
            -auto-approve

      - run:
          name: "Transfer JMeter Files to Storage Account"
          working_directory: terraform
          command: |
            URL=$(terraform output --raw storage_file_share_url)
            KEY=$(terraform output --raw storage_account_key)
            cp ../<< pipeline.parameters.properties_file_name >>  ../jmeter/<< pipeline.parameters.properties_file_name >>

            az storage file upload-batch \
            --destination $URL \
            --source "../<< pipeline.parameters.jmeter_directory_input >>" \
            --account-key $KEY

      - run:
          name: "Run Terraform Apply"
          working_directory: terraform
          command: |
            # Load output variables from file
            set -a
            source ../.env
            set +a

            # Run terraform apply command
            terraform apply -auto-approve

      - run:
          name: "Waiting for test results."
          working_directory: terraform
          command: |
            RG=$(terraform output --raw resource_group_name)
            NAME=$(terraform output --raw jmeter_controller_name)
            echo "`date`: Started!"
            while [ $(az container show -g $RG -n $NAME --query "containers[0].instanceView.currentState.state" -o tsv) == "Running" ]; do
              echo "`date`: Still Running..."
              sleep 20
            done
            echo "`date`: Finished!"

      - run:
          name: "Get output logs."
          working_directory: terraform
          command: |
            RG=$(terraform output --raw resource_group_name)
            NAME=$(terraform output --raw jmeter_controller_name)
            az container logs -g $RG -n $NAME

      - run:
          name: "Download JMeter Results."
          working_directory: terraform
          command: |
            KEY=$(terraform output --raw storage_account_key)
            STORAGE_NAME=$(terraform output --raw storage_account_name)
            FILESHARE_NAME=$(terraform output --raw storage_file_share_name)
            JMETER_RESULTS=$(terraform output --raw jmeter_results_file)
            echo $JMETER_RESULTS_PATH
            az storage file download -p $JMETER_RESULTS -s $FILESHARE_NAME --account-name $STORAGE_NAME --account-key $KEY

      - run:
          name: "Convert JMeter results to JUnit."
          working_directory: terraform
          command: |
            JMETER_RESULTS=$(terraform output --raw jmeter_results_file)
            JUNIT_RESULTS=<< pipeline.parameters.junit_file_name >>
            python3 ../scripts/jtl_junit_converter.py $JMETER_RESULTS $JUNIT_RESULTS

      - run:
          name: "Upload JUnit Results to fileshare."
          working_directory: terraform
          command: |
            KEY=$(terraform output --raw storage_account_key)
            STORAGE_NAME=$(terraform output --raw storage_account_name)
            FILESHARE_NAME=$(terraform output --raw storage_file_share_name)
            JUNIT_RESULTS=<< pipeline.parameters.junit_file_name >>
            az storage file upload -s $FILESHARE_NAME --source $JUNIT_RESULTS --account-name $STORAGE_NAME --account-key $KEY

      - store_test_results:
          name: "Store test results"
          path: terraform

      - store_artifacts:
          path: terraform/<< pipeline.parameters.junit_file_name >>

      # - terraform/destroy:
      #     path: terraform

  cleanup:
    executor:
      name: azure-cli/default
    steps:
      - checkout 

      - attach_workspace:
          at: .
      
      - login-to-azure-down

      - run:
          name: "Clean up environment"
          command: |
            cd scripts
            chmod a+x ./cleanup.sh
            ./cleanup.sh << pipeline.parameters.environment_name >> jmeter

      

workflows:
  build_jmeter_docker_image:
    jobs:
      - build_image_approval:
          type: approval
      - build_image:
          requires:
            - build_image_approval
          # filters:
          #   branches:
          #     only:
          #       - main

  # build_deploy_loadtest:
  #   jobs:
  #     - build_web_app
  #     - test_web_app:
  #         requires:
  #           - build_web_app
  #     - package_web_app:
  #         requires:
  #           - test_web_app
  #         # filters:
  #         #   branches:
  #         #     only:
  #         #       - main
  #     - deploy_approval:
  #         type: approval
  #         requires:
  #           - package_web_app
  #     - deploy_web_app:
  #         requires:
  #           - deploy_approval
  #     - load_test:
  #         requires:
  #           - deploy_web_app

  build_deploy_loadtest:
    jobs:
      # - deploy_approval:
      #     type: approval
      - deploy_script
          # requires:
          #   - deploy_approval
      - load_test:
          requires: 
            - deploy_script
      - cleanup_approval:
          type: approval
          requires: 
            - load_test
      - cleanup:
          requires: 
            - cleanup_approval


  


