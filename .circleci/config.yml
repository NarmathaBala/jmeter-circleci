version: 2.1

parameters:
  project_dir:
    type: string
    default: "JMeterCircleCI"
  test_dir:
    type: string
    default: "JMeterCircleCI.Tests"
  function_zip_file:
    type: string
    default: "func-jmetercircleci.zip"
  jmeter_server_vm:
    type: string
    default: "jmeterserver"
  jmeter_client_vm:
    type: string
    default: "jmeterclient"
  key_vault_name:
    type: string
    default: "kv-circleci"

orbs:
  windows: circleci/windows@2.2.0
  terraform: circleci/terraform@3.0.0
  azure-cli: circleci/azure-cli@1.2.0

commands:
  login-to-azure:
    steps:
      - azure-cli/install

      - run:
          name: "Verify Azure install"
          command: az -v

      - azure-cli/login-with-service-principal:
          azure-sp: ARM_CLIENT_ID
          azure-sp-password: ARM_CLIENT_SECRET
          azure-sp-tenant: ARM_TENANT_ID

jobs:
  build_image:
    description: Build and Push JMeter Docker image
    executor:
      name: azure-cli/default
    steps:
      - checkout

      - login-to-azure

      - run:
          name: "Build and Push JMeter Docker image"
          command: >
            az acr build
            -t $TF_VAR_JMETER_DOCKER_IMAGE
            -r $TF_VAR_JMETER_IMAGE_REGISTRY_NAME
            -f docker/Dockerfile
            .

  build_web_app:
    description: Build application with Release configuration
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Build Application according to some given configuration"
          command: >
            dotnet
            build << pipeline.parameters.project_dir >>
            --configuration Release

  test_web_app:
    description: Setup and run application tests
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Run Application Tests"
          command: >
            dotnet
            test << pipeline.parameters.test_dir >>
            --configuration Release
            --logger trx

      - run:
          name: "Install trx2junit"
          when: always
          command: |
            dotnet tool install -g trx2junit
            trx2junit << pipeline.parameters.test_dir >>/TestResults/*.trx

      - store_test_results:
          name: "Store test results"
          path: << pipeline.parameters.test_dir >>/TestResults

  package_web_app:
    description: Package application
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Create package folder"
          command: >
            dotnet
            publish << pipeline.parameters.project_dir >>
            --configuration Release
            --output package

      - run:
          name: "Zip package folder"
          command: >
            Compress-Archive
            -Path package
            -DestinationPath << pipeline.parameters.function_zip_file >>

      - persist_to_workspace:
          name: "Upload zip file to shared workspace"
          root: .
          paths:
            - << pipeline.parameters.function_zip_file >>

  deploy_web_app:
    description: Deploy application
    executor:
      name: azure-cli/default
    steps:
      - attach_workspace:
          at: .

      - login-to-azure

      - run:
          name: "Create azure function"
          command: |
            # Set common variables which is associated with build id
            $rg = "rg-jmetercircleci$Env:CIRCLE_BUILD_NUM"
            $st = "stjmetercircleci$Env:CIRCLE_BUILD_NUM"
            $func = "func-jmetercircleci$Env:CIRCLE_BUILD_NUM"

            # Create resource group
            az group create \
            --location eastus \
            --name "$rg"

            # Create storage account
            az storage account create \
            --resource-group "$rg" \
            --name "$st"

            # Create azure function app
            az functionapp create \
            --resource-group "$rg" \
            --storage-account "$st" \
            --name "$func" \
            --consumption-plan-location eastus \
            --os-type Windows \
            --runtime dotnet

            # Deploy zip file
            az functionapp deployment source config-zip \
            --resource-group "$rg" \
            --name "$func" \
            --src << pipeline.parameters.function_zip_file >>

            # Output variables to file
            echo "`$buildNum=`"$Env:CIRCLE_BUILD_NUM`"" >> output.ps1
            echo "`$targetHost=`"$func.azurewebsites.net`"" >> output.ps1

      - persist_to_workspace:
          name: "Upload output file to shared workspace"
          root: .
          paths:
            - output.ps1

  load_test:
    executor: terraform/default
    steps:
      - checkout

      - attach_workspace:
          at: .

      - login-to-azure

      - terraform/init:
          path: terraform

      - terraform/validate:
          path: terraform

      - terraform/plan:
          path: terraform

      - terraform/apply:
          path: terraform

      - run:
          name: "Waiting for test results."
          command: |
            RG = & terraform output resource_group_name
            NAME = & terraform output jmeter_master_name
            echo "`date`: Started!"
            while [ $(az container show -g $RG -n $NAME --query "containers[0].instanceView.currentState.state" -o tsv) == "Running" ]; do
              echo "`date`: Still Running..."
              sleep 20
            done
            echo "`date`: Finished!"

      - run:
          name: "Get output logs."
          command: |
            az container logs -g $(terraform output resource_group_name) -n $(terraform output jmeter_master_name)

      # - terraform/destroy:
      #     path: terraform

workflows:
  build_jmeter_docker_image:
    jobs:
      - build_image_approval:
          type: approval
      - build_image:
          requires:
            - build_image_approval
          # filters:
          #   branches:
          #     only:
          #       - main

  build_deploy_loadtest:
    jobs:
      - build_web_app
      - test_web_app:
          requires:
            - build_web_app
      - package_web_app:
          requires:
            - test_web_app
          # filters:
          #   branches:
          #     only:
          #       - main
      - deploy_approval:
          type: approval
          requires:
            - package_web_app
      - deploy_web_app:
          requires:
            - deploy_approval
      - load_test:
          requires:
            - deploy_web_app
